.get_ecr_token_using_crane: &get_ecr_token_using_crane
  - *get_aws_role
  - aws ecr get-login-password --region ap-northeast-2 | crane auth login --username AWS --password-stdin $(dirname ${AWS_ECR_REPO_URL})

.get_ecr_token_using_docker: &get_ecr_token_using_docker
  - *get_aws_role
  - aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${AWS_ECR_REPO_URL}

.build-container-image:
  stage: build
  services:
    - name: docker:dind
  before_script:
    - *get_ecr_token_using_docker
  script:
    - docker build -t ${IMAGE} .
    - docker tag ${IMAGE} ${REMOTE_LATEST_IMAGE}
    - docker push ${REMOTE_LATEST_IMAGE}
    - docker tag ${IMAGE} ${REMOTE_REGULAR_IMAGE}
    - docker push ${REMOTE_REGULAR_IMAGE}
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes: 
        paths:
          - app.py
          - Dockerfile
          - requirements.txt

.trivy:
  stage: test
  services:
    - name: docker:dind
  before_script:
    - *get_ecr_token_using_docker
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
    - apk update && apk add jq
  script:
    - ./trivy image --download-db-only --no-progress --cache-dir .trivycache/
    - ./trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@contrib/gitlab-codequality.tpl" -o gl-codequality-image.json ${REMOTE_LATEST_IMAGE}
    - ./trivy filesystem --scanners misconfig,vuln --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@contrib/gitlab-codequality.tpl" -o gl-codequality-fs.json .
    - jq -s 'add' gl-codequality-image.json gl-codequality-fs.json > gl-codequality.json
    - ./trivy image --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress ${REMOTE_LATEST_IMAGE}
  cache:
    paths:
      - .trivycache/
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes: 
        paths:
          - app.py
          - Dockerfile
          - requirements.txt
  artifacts:
    paths:
      - gl-codequality.json
    reports:
      codequality: gl-codequality.json

.nuclei:
  stage: test
  services:
    - name: docker:dind
  before_script:
    - *get_ecr_token_using_docker
    - export NUCLEI_VERSION=$(wget -qO - "https://api.github.com/repos/projectdiscovery/nuclei/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - wget --no-verbose https://github.com/projectdiscovery/nuclei/releases/download/v${NUCLEI_VERSION}/nuclei_${NUCLEI_VERSION}_linux_amd64.zip -O nuclei.zip && unzip -o nuclei.zip && rm -rf nuclei.zip
  script:
    - docker run --name ${CI_PROJECT_NAME} -d -p 8080:8080 ${REMOTE_LATEST_IMAGE}
    - while true; do wget --spider --timeout=1 --tries=1 http://docker:8080 >/dev/null 2>&1 && break; done
    - ./nuclei -l urls.txt --severity critical -ud .nuclei-templates/ -as -ni
  cache:
    paths:
      - .nuclei-templates/
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes: 
        paths:
          - app.py
          - Dockerfile
          - requirements.txt
          - urls.txt

.sign-container-image:
  stage: sign
  image: registry.gitlab.com/ebsung/images:crane
  before_script:
    - *get_ecr_token_using_crane
    - export IMAGE_DIGEST=${REMOTE_LATEST_IMAGE}@$(crane digest ${REMOTE_LATEST_IMAGE})
  script:
    - cosign sign --key awskms:///${AWS_KMS_KEY_ID} ${IMAGE_DIGEST} --tlog-upload=false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes: 
        paths:
          - app.py
          - Dockerfile
          - requirements.txt

.verify-container-image:
  stage: verify
  image: registry.gitlab.com/ebsung/images:crane
  before_script:
    - *get_ecr_token_using_crane
    - export IMAGE_DIGEST=${REMOTE_LATEST_IMAGE}@$(crane digest ${REMOTE_LATEST_IMAGE})
  script:
    - cosign verify --insecure-ignore-tlog --key awskms:///${AWS_KMS_KEY_ID} ${IMAGE_DIGEST}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes: 
        paths:
          - app.py
          - Dockerfile
          - requirements.txt